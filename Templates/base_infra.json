{
	"AWSTemplateFormatVersion" : "2010-09-09",

    "Parameters" : {
		"KeyName" : {
			"Description" 				: "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type"						: "AWS::EC2::KeyPair::KeyName",
			"Default" 					: "aws-sp",
			"ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
		},
		
		"PrivateKey" : {
			"Description" 				: "The private RSA key",
			"Type"						: "String",
			"Default"					: "",
			"ConstraintDescription" : "Must be the whole content of the private key file (.pem) for access"
		},

		"InstanceType" : {
			"Description" 				: "WebServer EC2 instance type",
			"Type" 						: "String",
			"Default" 					: "t2.micro",
			"AllowedValues" 			: [ "t2.nano", "t2.micro", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge"],
			"ConstraintDescription"	: "Must be a valid EC2 instance type."
		},
		
		"AvailabilityZone" : {
			"Description"				: "The Availability Zone in which the instances will be launched",
			"Type"						: "String",
			"Default"					: "sa-east-1a",
			"AllowedValues"			: [ "us-east-1a", "sa-east-1a", "sa-east-1c" ],
			"ConstraintDescription"	: "Must be a valid Availability Zone value"
		},
		
		"NATInstanceAMI" : {
			"Description"				: "The ami for the NAT instance to be launched",
			"Type"						: "String",
			"Default"					: "ami-22169b4e",
			"AllowedPattern"			: "ami-[a-z0-9]*",
			"ConstraintDescription"	: "Must be a valid NAT ami image"
		},
		
		"ServerAccess" : {
			"Description" 				: "CIDR IP range allowed to login to the NAT instance",
			"Type" 						: "String",
			"MinLength"					: "9",
			"MaxLength"					: "18",
			"Default" 					: "0.0.0.0/0",
			"AllowedPattern" 			: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
		}
	},

	"Mappings" : {
		
		"SubnetConfig" : {
			"VPC"     : { "CIDR" : "192.168.0.0/24" },
			"Public"  : { "CIDR" : "192.168.0.240/28" },
			"Private" : { "CIDR" : "192.168.0.0/25" }
		},
		
		"AWSInstanceType2Arch" : {
			"t2.micro"		: { "Arch" : "HVM64" },
			"c4.large"		: { "Arch" : "HVM64" },
			"c4.xlarge"		: { "Arch" : "HVM64" },
			"c4.2xlarge"	: { "Arch" : "HVM64" },
			"c4.4xlarge"	: { "Arch" : "HVM64" },
			"c4.8xlarge"	: { "Arch" : "HVM64" },
			"g2.2xlarge"	: { "Arch" : "HVMG2" },
			"g2.8xlarge"	: { "Arch" : "HVMG2" }
		},

		"AWSRegionArch2AMI" : {
			"us-east-1" : { "HVM64" : "ami-08111162", "HVMG2" : "ami-ebcec381" },
			"us-west-2"	: { "HVM64" : "ami-c229c0a2", "HVMG2" : "ami-0f28c06f" },
			"us-west-1"	: { "HVM64" : "ami-1b0f7d7b", "HVMG2" : "ami-ab9defcb" },
			"sa-east-1"	: { "HVM64" : "ami-1e159872", "HVMG2" : "NOT_SUPPORTED"}
		}
	},
  
	"Resources" : {
		
		"IAMUser" : {
			"Type" : "AWS::IAM::User",
			"Properties" : {
				"Path" : "/"
			}
		},
		
		"AccessKey" : {
			"Type" : "AWS::IAM::AccessKey",
			"Properties" : {
				"UserName" : { "Ref" : "IAMUser" }
			}
		},
		
		"VPC" : {
			"Type" 		: "AWS::EC2::VPC",
			"Properties" : {
				"CidrBlock"				: { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
				"EnableDnsSupport"	: "true",
				"EnableDnsHostnames"	: "true",
				"InstanceTenancy"		: "default"
			}
		},
		
		"VPCEndpointS3" : {
			"DependsOn" : [ "PrivateRoute", "PublicRoute" ],
			"Type" : "AWS::EC2::VPCEndpoint",
			"Properties" : {
				"ServiceName"		: "com.amazonaws.sa-east-1.s3",
				"VpcId"				: { "Ref": "VPC" },
				"RouteTableIds"	: [ { "Ref": "PrivateRouteTable"  }, { "Ref": "PublicRouteTable"  } ]
			}
		},
		
		"PrivateSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone" 	: { "Ref" : "AvailabilityZone" },
				"VpcId" 					: { "Ref" : "VPC" },
				"CidrBlock" 			: { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]}
			}
		},

		"PrivateRouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"PrivateSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" 		: { "Ref" : "PrivateSubnet" },
				"RouteTableId" : { "Ref" : "PrivateRouteTable" }
			}
		},
		
		"PrivateRoute" : {
			"Type" : "AWS::EC2::Route",
			"Properties" : {
			  "RouteTableId" 				: { "Ref" : "PrivateRouteTable" },
			  "DestinationCidrBlock" 	: "0.0.0.0/0",
			  "InstanceId" 				: { "Ref" : "NATInstance" }
			}
		},
		
		"PrivateSecurityGroup" : {
			"Type" 		: "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription"		: "Security Group for VPC",
				"VpcId"						: { "Ref" : "VPC" }
			}
		},
		
		"PrivateIngressRuleSSH" : {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol"						: "tcp",
				"FromPort" 							: "22",
				"ToPort" 							: "22",
				"SourceSecurityGroupId"			: { "Ref" : "NatSecurityGroup" },
				"GroupId" 							: { 	"Fn::GetAtt": [
																"PrivateSecurityGroup",
																"GroupId" ]}
			}
		},
		
		"EgressRuleSG" : {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"IpProtocol" 						: "-1",
				"FromPort" 							: "-1",
				"ToPort" 							: "-1",
				"CidrIp"								:  "0.0.0.0/0",
				"GroupId" 							: 	{ 	"Fn::GetAtt" : [
																"PrivateSecurityGroup",
																"GroupId" ]}
			}
		},
		
		"IngressRuleSG" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" 						: "-1",
				"FromPort" 							: "0",
				"ToPort" 							: "65535",
				"SourceSecurityGroupId"			:  { 	"Fn::GetAtt" : [
																"PrivateSecurityGroup",
																"GroupId" ]},
				"GroupId" 							: { 	"Fn::GetAtt" : [
																"PrivateSecurityGroup",
																"GroupId" ]}
			}
		},
		
		"InternetGateway" : {
			"Type" 		: "AWS::EC2::InternetGateway"
		},
		
		"GatewayToInternet" : {
			"Type" 		: "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"InternetGatewayId" 	: { "Ref" : "InternetGateway" },
				"VpcId" 					: { "Ref" : "VPC" }
			}
		},
		
		
		"NATInstance" :{
			"Type" 		: "AWS::EC2::Instance",
			"Properties" : {
				"InstanceType" 		: "t2.micro",
				"KeyName" 				: { "Ref" : "KeyName" },
				"ImageId" 				: { "Ref" : "NATInstanceAMI" },
				"SourceDestCheck" 	: "false",
				"NetworkInterfaces"	: 	[ { 	"AssociatePublicIpAddress"	: "true",
														"DeviceIndex"					: "0",
														"GroupSet"						: [{ "Ref" : "NatSecurityGroup" }],
														"SubnetId"						: { "Ref" : "PublicSubnet" }}],
				"UserData"				: 	{ "Fn::Base64" : { "Fn::Join" : ["", [
												 "#!/bin/bash\n",
												 "# Install the files and packages from the metadata\n",
												 "/opt/aws/bin/cfn-init -v -c initOrderNAT",
												 "         --stack ", { "Ref" : "AWS::StackName" },
												 "         --resource NATInstance ",
												 "         --region ", { "Ref" : "AWS::Region" }, "\n" ]]}},
				"Tags" : [
					{ "Key" : "Name", "Value" : "NAT" }
				]
			},
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"initOrderNAT" : ["setupNAT", "configureNAT"]
					},
					"setupNAT"	: {
						"files"	: {
							"/home/ec2-user/.aws/credentials" : {
								"content" : {
									"Fn::Join" : ["", [
										"[default]\n",
										"aws_access_key_id=", { "Ref" : "AccessKey" }, "\n",
										"aws_secret_access_key=", { "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ] }					
									]]
								}
							},
							"/home/ec2-user/.aws/config" : {
								"content" : {
									"Fn::Join" : ["", [
										"[default]\n",
										"region = sa-east-1"						
									]]
								}
							},
							"/home/ec2-user/.ssh/id_rsa.in" : {
								"content" : { "Ref" : "PrivateKey" },
								"owner" : "ec2-user"
							},
							"/etc/hosts" : {
								"content" : {
									"Fn::Join" : ["", [
									"127.0.0.1   localhost   localhost\n",
									{ "Fn::FindInMap" : [ "IpAddressConfig", "Node01", "IP"  ] },"  node01  node01\n",
									{ "Fn::FindInMap" : [ "IpAddressConfig", "Node02", "IP"  ] },"  node02  node02\n",
									{ "Fn::FindInMap" : [ "IpAddressConfig", "Node03", "IP"  ] },"  node03  node03\n",
									{ "Fn::FindInMap" : [ "IpAddressConfig", "Node04", "IP"  ] },"  node04  node04\n",
									{ "Fn::FindInMap" : [ "IpAddressConfig", "Node05", "IP"  ] },"  node05  node05\n"]]
								}
							},
							"/home/ec2-user/.initScripts/rsaParser.py" : {
								"content" : {
									"Fn::Join" : ["\n",[
										"import re",
										"input = open(\"/home/ec2-user/.ssh/id_rsa.in\").read()",
										"bgnEnd = re.findall('-----[A-Z\\s]+-----',input)",
										"content = re.findall('-\\s(.+?)\\s-',input)",
										"lines = content[0].split(\" \")",
										"outputFile = open(\"/home/ec2-user/.ssh/id_rsa\", \"w\")",
										"outputFile.write(bgnEnd[0] + '\\n')",
										"[outputFile.write(line + '\\n') for line in lines]",
										"outputFile.write(bgnEnd[1])",
										"outputFile.close()" ]]
								},
								"owner" : "ec2-user"
							},
							"/home/ec2-user/.initScripts/sshHostScan.py" : {
								"content" : {
									"Fn::Join" : ["\n",[
										"import re",
										"from subprocess import check_output",
										"input = open(\"/etc/hosts\").read()",
										"hosts = re.findall('\\s([a-z0-9]+[0-9])\\n', input)",
										"ips = re.findall('\\n(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\s', input)",
										"output = list()",
										"[output.append(check_output([\"ssh-keyscan\", \"-H\", ip])) for ip in ips]",
										"[output.append(check_output([\"ssh-keyscan\", \"-H\", host])) for host in hosts]",
										"outputFile = open(\"/home/ec2-user/.ssh/known_hosts\", \"w\")",
										"[outputFile.write(line + '\\n') for line in output]",
										"outputFile.close()"]]
								},
								"owner" : "ec2-user"
							}
						},
						"commands" : {
							"parseRSA" : {
								"command" : "python /home/ec2-user/.initScripts/rsaParser.py"
							},
							"scanHosts" : {
								"command" : "python /home/ec2-user/.initScripts/sshHostScan.py"
							}
						}
					},
					"configureNAT"	: {
						"commands" : {
							"permissionRSA" : {
								"command" : "chmod 600 /home/ec2-user/.ssh/id_rsa"
							},
							"ownerRSA" : {
								"command" : "chown ec2-user.ec2-user /home/ec2-user/.ssh/id_rsa"
							},
							"permissionKnowHosts" : {
								"command" : "chmod 600 /home/ec2-user/.ssh/know_hosts"
							},
							"ownerKnowHosts" : {
								"command" : "chown ec2-user.ec2-user /home/ec2-user/.ssh/know_hosts"
							}
						}
					}
				}
			}
		},
		
		"PublicSubnet" : {
			"Type"		: "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone"		: { "Ref" : "AvailabilityZone" },
				"CidrBlock" 				: { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
				"VpcId" 						: { "Ref" : "VPC" }
			}
		},
		
		"PublicSubnetRouteAssociation" : {
			"Type" 		: "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"RouteTableId" : { "Ref" : "PublicRouteTable" },
				"SubnetId" 		: { "Ref" : "PublicSubnet" }
				}
		},
		
		"PublicRouteTable" : {
			"Type" 		: "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId"	:	{ "Ref" : "VPC" }
			}
		},
		
		"PublicRoute" : {
			"Type" 		: "AWS::EC2::Route",
			"Properties" : {
				"RouteTableId" 			: { "Ref" : "PublicRouteTable" },
				"DestinationCidrBlock" 	: "0.0.0.0/0",
				"GatewayId" 				: { "Ref" : "InternetGateway" }
			}
		},

		"NatSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "NAT Security Group",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [{
					"IpProtocol"	: "tcp",
					"FromPort" 		: "22",
					"ToPort" 		: "22",
					"CidrIp" 		: { "Ref" : "ServerAccess" }
					},{
					"IpProtocol" 	: "tcp",
					"FromPort" 		: "3389",
					"ToPort" 		: "3389",
					"CidrIp" 		: { "Ref" : "ServerAccess" }
					}]
			}
		},
		
		"NatSecurityGroupIngressPrivate" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" : { "Ref" : "NatSecurityGroup" },
					"IpProtocol"				: "-1",
					"FromPort"					: "-1",
					"ToPort"						: "-1",
					"SourceSecurityGroupId"	: { "Ref" : "PrivateSecurityGroup" }
			}
		},

		"NatSecurityGroupIngress1" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" : { "Ref" : "NatSecurityGroup" },
					"IpProtocol"				: "icmp",
					"FromPort"					: "-1",
					"ToPort"						: "-1",
					"SourceSecurityGroupId"	: { "Ref" : "NatSecurityGroup" }
			}
		},

		"NatSecurityGroupIngress22" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" 					: { "Ref" : "NatSecurityGroup" },
				"IpProtocol"				: "tcp",
				"FromPort"					: "22",
				"ToPort"						: "22",
				"SourceSecurityGroupId"	: { "Ref" : "NatSecurityGroup" }
			}
		},
    
		"NatSecurityGroupIngress3389" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" 						: { "Ref" : "NatSecurityGroup" },
				"IpProtocol" 					: "tcp",
				"FromPort" 						: "3389",
				"ToPort" 						: "3389",
				"SourceSecurityGroupId" 	: { "Ref" : "NatSecurityGroup" }
			}
		},

		"NatSecurityGroupIngress80" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" 						: { "Ref" : "NatSecurityGroup" },
				"IpProtocol" 					: "tcp",
				"FromPort" 						: "80",
				"ToPort" 						: "80",
				"SourceSecurityGroupId" 	: { "Ref" : "NatSecurityGroup" }
			}
		},

		"NatSecurityGroupIngress443" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" 						: { "Ref" : "NatSecurityGroup" },
				"IpProtocol" 					: "tcp",
				"FromPort" 						: "443",
				"ToPort" 						: "443",
				"SourceSecurityGroupId" 	: { "Ref" : "NatSecurityGroup" }
			}
		}
	}
}