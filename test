{"Mappings": {"AWSInstanceType2Arch": {"g2.8xlarge": {"Arch": "HVMG2"}, "c4.8xlarge": {"Arch": "HVM64"}, "c4.large": {"Arch": "HVM64"}, "c4.2xlarge": {"Arch": "HVM64"}, "c4.4xlarge": {"Arch": "HVM64"}, "c4.xlarge": {"Arch": "HVM64"}, "t2.micro": {"Arch": "HVM64"}, "g2.2xlarge": {"Arch": "HVMG2"}}, "IpAddressConfig": {"Node01": {"IP": "192.168.0.4"}, "Node03": {"IP": "192.168.0.6"}, "Node02": {"IP": "192.168.0.5"}}, "AWSRegionArch2AMI": {"us-east-1": {"HVM64": "ami-08111162", "HVMG2": "ami-ebcec381"}, "us-west-1": {"HVM64": "ami-1b0f7d7b", "HVMG2": "ami-ab9defcb"}, "sa-east-1": {"HVM64": "ami-1e159872", "HVMG2": "NOT_SUPPORTED"}, "us-west-2": {"HVM64": "ami-c229c0a2", "HVMG2": "ami-0f28c06f"}}, "SubnetConfig": {"Private": {"CIDR": "192.168.0.0/28"}, "Public": {"CIDR": "192.168.0.240/28"}, "VPC": {"CIDR": "192.168.0.0/24"}}}, "AWSTemplateFormatVersion": "2010-09-09", "Parameters": {"InstanceType": {"Default": "t2.micro", "ConstraintDescription": "Must be a valid EC2 instance type.", "Description": "WebServer EC2 instance type", "AllowedValues": ["t2.nano", "t2.micro", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge"], "Type": "String"}, "PrivateKey": {"Default": "", "ConstraintDescription": "Must be the whole content of the private key file (.pem) for access", "Description": "The private RSA key", "Type": "String"}, "AvailabilityZone": {"Default": "sa-east-1a", "ConstraintDescription": "Must be a valid Availability Zone value", "Description": "The Availability Zone in which the instances will be launched", "AllowedValues": ["us-east-1a", "sa-east-1a", "sa-east-1c"], "Type": "String"}, "KeyName": {"Default": "aws-sp", "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.", "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance", "Type": "AWS::EC2::KeyPair::KeyName"}, "ServerAccess": {"ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.", "Description": "CIDR IP range allowed to login to the NAT instance", "MaxLength": "18", "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", "Default": "0.0.0.0/0", "MinLength": "9", "Type": "String"}, "NATInstanceAMI": {"AllowedPattern": "ami-[a-z0-9]*", "Default": "ami-22169b4e", "ConstraintDescription": "Must be a valid NAT ami image", "Description": "The ami for the NAT instance to be launched", "Type": "String"}}, "Resources": {"NatSecurityGroupIngress22": {"Properties": {"SourceSecurityGroupId": {"Ref": "NatSecurityGroup"}, "ToPort": "22", "GroupId": {"Ref": "NatSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "22"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "NatSecurityGroup": {"Properties": {"VpcId": {"Ref": "VPC"}, "GroupDescription": "NAT Security Group", "SecurityGroupIngress": [{"CidrIp": {"Ref": "ServerAccess"}, "ToPort": "22", "IpProtocol": "tcp", "FromPort": "22"}, {"CidrIp": {"Ref": "ServerAccess"}, "ToPort": "3389", "IpProtocol": "tcp", "FromPort": "3389"}]}, "Type": "AWS::EC2::SecurityGroup"}, "PrivateSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PrivateSubnet"}, "RouteTableId": {"Ref": "PrivateRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "PrivateIngressRuleSSH": {"Properties": {"SourceSecurityGroupId": {"Ref": "NatSecurityGroup"}, "ToPort": "22", "GroupId": {"Fn::GetAtt": ["PrivateSecurityGroup", "GroupId"]}, "IpProtocol": "tcp", "FromPort": "22"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "IngressRuleSG": {"Properties": {"SourceSecurityGroupId": {"Fn::GetAtt": ["PrivateSecurityGroup", "GroupId"]}, "ToPort": "65535", "GroupId": {"Fn::GetAtt": ["PrivateSecurityGroup", "GroupId"]}, "IpProtocol": "-1", "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "StackNode02": {"Metadata": {"AWS::CloudFormation::Init": {"configure": {"commands": {"exportJavaHome": {"command": "echo \"export JAVA_HOME=/usr/lib/jvm/java-openjdk/\" >> /home/ec2-user/.bashrc"}, "exportOpenMPIBin": {"command": "echo \"export PATH=/usr/lib64/openmpi/bin:$PATH\" >> /home/ec2-user/.bashrc"}, "ownerAWSConfig": {"command": "chown ec2-user.ec2-user /home/ec2-user/.aws/*"}, "ownerRSA": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/id_rsa"}, "permissionAWSConfig": {"command": "chmod 600 /home/ec2-user/.aws/*"}, "permissionKnownHosts": {"command": "chmod 600 /home/ec2-user/.ssh/known_hosts"}, "ownerKnownHosts": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/known_hosts"}, "permissionRSA": {"command": "chmod 600 /home/ec2-user/.ssh/id_rsa"}, "exportOpenMPILib": {"command": "echo \"export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib:$LD_LIBRARY_PATH\" >> /home/ec2-user/.bashrc"}}}, "configSets": {"initOrder": ["setup", "configure", "custom"]}, "custom": {"commands": {"run_custom.py": {"ignoreErrors": "true", "command": "python /home/ec2-user/.initScripts/custom.py"}, "run_custom.sh": {"ignoreErrors": "true", "command": "bash /home/ec2-user/.initScripts/custom.sh"}}, "files": {"/home/ec2-user/.initScripts/custom.py": {"content": {"Fn::Join": ["\n", ["f = open(\"/home/ec2-user/.misteriousOutputFromPython\", \"w\")", "f.write(\"Custom almighty python execution on instance creation!\")", "f.close()"]]}}, "/home/ec2-user/.initScripts/custom.sh": {"content": {"Fn::Join": ["\n", ["#!/bin/bash", "echo \"Custom bash execution on instance creation!\" > /home/ec2-user/.misteriousOutputFromBash"]]}}}}, "setup": {"packages": {"yum": {"gcc": [], "java-1.8.0-openjdk-devel": [], "openmpi": [], "openmpi-devel": [], "gcc-c++": [], "ant": []}}, "commands": {"scanHosts": {"command": "python /home/ec2-user/.initScripts/sshHostScan.py"}, "parseRSA": {"command": "python /home/ec2-user/.initScripts/rsaParser.py"}}, "files": {"/home/ec2-user/.aws/credentials": {"content": {"Fn::Join": ["", ["[default]\n", "aws_access_key_id=", {"Ref": "AccessKey"}, "\n", "aws_secret_access_key=", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]}]]}}, "/etc/hosts": {"content": {"Fn::Join": ["", ["127.0.0.1    localhost    localhost\n", "192.168.0.4    node01    node01\n", "192.168.0.5    node02    node02\n", "192.168.0.6    node03    node03\n"]]}}, "/home/ec2-user/.initScripts/sshHostScan.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "from subprocess import check_output", "input = open(\"/etc/hosts\").read()", "hosts = re.findall('\\s([a-z0-9]+[0-9])\\n', input)", "ips = re.findall('\\n(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\s', input)", "output = list()", "[output.append(check_output([\"ssh-keyscan\", \"-H\", ip])) for ip in ips]", "[output.append(check_output([\"ssh-keyscan\", \"-H\", host])) for host in hosts]", "outputFile = open(\"/home/ec2-user/.ssh/known_hosts\", \"w\")", "[outputFile.write(line + '\\n') for line in output]", "outputFile.close()"]]}}, "/home/ec2-user/.initScripts/rsaParser.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "input = open(\"/home/ec2-user/.ssh/id_rsa.in\").read()", "bgnEnd = re.findall('-----[A-Z\\s]+-----',input)", "content = re.findall('-\\s(.+?)\\s-',input)", "lines = content[0].split(\" \")", "outputFile = open(\"/home/ec2-user/.ssh/id_rsa\", \"w\")", "outputFile.write(bgnEnd[0] + '\\n')", "[outputFile.write(line + '\\n') for line in lines]", "outputFile.write(bgnEnd[1])", "outputFile.close()"]]}}, "/home/ec2-user/.ssh/id_rsa.in": {"owner": "ec2-user", "content": {"Ref": "PrivateKey"}}, "/home/ec2-user/.aws/config": {"content": {"Fn::Join": ["", ["[default]\n", "region = sa-east-1"]]}}}}}}, "Properties": {"InstanceType": {"Ref": "InstanceType"}, "Tags": [{"Value": "Node02", "Key": "Name"}], "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]}, "KeyName": {"Ref": "KeyName"}, "NetworkInterfaces": [{"AssociatePublicIpAddress": "false", "SubnetId": {"Ref": "PrivateSubnet"}, "GroupSet": [{"Ref": "PrivateSecurityGroup"}], "PrivateIpAddress": {"Fn::FindInMap": ["IpAddressConfig", "Node02", "IP"]}, "DeviceIndex": "0"}], "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#!/bin/bash\n", "# Install the files and packages from the metadata\n", "/opt/aws/bin/cfn-init -v -c initOrder", "         --stack ", {"Ref": "AWS::StackName"}, "         --resource StackNode02", "         --region ", {"Ref": "AWS::Region"}, "\n"]]}}}, "DependsOn": "NATInstance", "Type": "AWS::EC2::Instance"}, "IAMUser": {"Properties": {"Path": "/"}, "Type": "AWS::IAM::User"}, "PublicSubnet": {"Properties": {"VpcId": {"Ref": "VPC"}, "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "Public", "CIDR"]}, "AvailabilityZone": {"Ref": "AvailabilityZone"}}, "Type": "AWS::EC2::Subnet"}, "PrivateRoute": {"Properties": {"RouteTableId": {"Ref": "PrivateRouteTable"}, "InstanceId": {"Ref": "NATInstance"}, "DestinationCidrBlock": "0.0.0.0/0"}, "Type": "AWS::EC2::Route"}, "NatSecurityGroupIngress80": {"Properties": {"SourceSecurityGroupId": {"Ref": "NatSecurityGroup"}, "ToPort": "80", "GroupId": {"Ref": "NatSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "80"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "NatSecurityGroupIngressPrivate": {"Properties": {"SourceSecurityGroupId": {"Ref": "PrivateSecurityGroup"}, "ToPort": "-1", "GroupId": {"Ref": "NatSecurityGroup"}, "IpProtocol": "-1", "FromPort": "-1"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicRoute": {"Properties": {"RouteTableId": {"Ref": "PublicRouteTable"}, "DestinationCidrBlock": "0.0.0.0/0", "GatewayId": {"Ref": "InternetGateway"}}, "Type": "AWS::EC2::Route"}, "PrivateRouteTable": {"Properties": {"VpcId": {"Ref": "VPC"}}, "Type": "AWS::EC2::RouteTable"}, "InternetGateway": {"Type": "AWS::EC2::InternetGateway"}, "EgressRuleSG": {"Properties": {"CidrIp": "0.0.0.0/0", "ToPort": "-1", "GroupId": {"Fn::GetAtt": ["PrivateSecurityGroup", "GroupId"]}, "IpProtocol": "-1", "FromPort": "-1"}, "Type": "AWS::EC2::SecurityGroupEgress"}, "NATInstance": {"Metadata": {"AWS::CloudFormation::Init": {"configSets": {"initOrderNAT": ["setupNAT", "configureNAT"]}, "configureNAT": {"commands": {"ownerRSA": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/id_rsa"}, "ownerKnowHosts": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/know_hosts"}, "permissionRSA": {"command": "chmod 600 /home/ec2-user/.ssh/id_rsa"}, "permissionKnowHosts": {"command": "chmod 600 /home/ec2-user/.ssh/know_hosts"}}}, "setupNAT": {"commands": {"scanHosts": {"command": "python /home/ec2-user/.initScripts/sshHostScan.py"}, "parseRSA": {"command": "python /home/ec2-user/.initScripts/rsaParser.py"}}, "files": {"/home/ec2-user/.aws/credentials": {"content": {"Fn::Join": ["", ["[default]\n", "aws_access_key_id=", {"Ref": "AccessKey"}, "\n", "aws_secret_access_key=", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]}]]}}, "/home/ec2-user/.initScripts/sshHostScan.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "from subprocess import check_output", "input = open(\"/etc/hosts\").read()", "hosts = re.findall('\\s([a-z0-9]+[0-9])\\n', input)", "ips = re.findall('\\n(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\s', input)", "output = list()", "[output.append(check_output([\"ssh-keyscan\", \"-H\", ip])) for ip in ips]", "[output.append(check_output([\"ssh-keyscan\", \"-H\", host])) for host in hosts]", "outputFile = open(\"/home/ec2-user/.ssh/known_hosts\", \"w\")", "[outputFile.write(line + '\\n') for line in output]", "outputFile.close()"]]}}, "/home/ec2-user/.initScripts/rsaParser.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "input = open(\"/home/ec2-user/.ssh/id_rsa.in\").read()", "bgnEnd = re.findall('-----[A-Z\\s]+-----',input)", "content = re.findall('-\\s(.+?)\\s-',input)", "lines = content[0].split(\" \")", "outputFile = open(\"/home/ec2-user/.ssh/id_rsa\", \"w\")", "outputFile.write(bgnEnd[0] + '\\n')", "[outputFile.write(line + '\\n') for line in lines]", "outputFile.write(bgnEnd[1])", "outputFile.close()"]]}}, "/etc/hosts": {"content": {"Fn::Join": ["", ["127.0.0.1    localhost    localhost\n", "192.168.0.4    node01    node01\n", "192.168.0.5    node02    node02\n", "192.168.0.6    node03    node03\n"]]}}, "/home/ec2-user/.ssh/id_rsa.in": {"owner": "ec2-user", "content": {"Ref": "PrivateKey"}}, "/home/ec2-user/.aws/config": {"content": {"Fn::Join": ["", ["[default]\n", "region = sa-east-1"]]}}}}}}, "Properties": {"SourceDestCheck": "false", "InstanceType": "t2.micro", "Tags": [{"Value": "NAT", "Key": "Name"}], "ImageId": {"Ref": "NATInstanceAMI"}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#!/bin/bash\n", "# Install the files and packages from the metadata\n", "/opt/aws/bin/cfn-init -v -c initOrderNAT", "         --stack ", {"Ref": "AWS::StackName"}, "         --resource NATInstance ", "         --region ", {"Ref": "AWS::Region"}, "\n"]]}}, "NetworkInterfaces": [{"AssociatePublicIpAddress": "true", "SubnetId": {"Ref": "PublicSubnet"}, "GroupSet": [{"Ref": "NatSecurityGroup"}], "DeviceIndex": "0"}]}, "Type": "AWS::EC2::Instance"}, "StackNode03": {"Metadata": {"AWS::CloudFormation::Init": {"configure": {"commands": {"exportJavaHome": {"command": "echo \"export JAVA_HOME=/usr/lib/jvm/java-openjdk/\" >> /home/ec2-user/.bashrc"}, "exportOpenMPIBin": {"command": "echo \"export PATH=/usr/lib64/openmpi/bin:$PATH\" >> /home/ec2-user/.bashrc"}, "ownerAWSConfig": {"command": "chown ec2-user.ec2-user /home/ec2-user/.aws/*"}, "ownerRSA": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/id_rsa"}, "permissionAWSConfig": {"command": "chmod 600 /home/ec2-user/.aws/*"}, "permissionKnownHosts": {"command": "chmod 600 /home/ec2-user/.ssh/known_hosts"}, "ownerKnownHosts": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/known_hosts"}, "permissionRSA": {"command": "chmod 600 /home/ec2-user/.ssh/id_rsa"}, "exportOpenMPILib": {"command": "echo \"export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib:$LD_LIBRARY_PATH\" >> /home/ec2-user/.bashrc"}}}, "configSets": {"initOrder": ["setup", "configure", "custom"]}, "custom": {"commands": {"run_custom.py": {"ignoreErrors": "true", "command": "python /home/ec2-user/.initScripts/custom.py"}, "run_custom.sh": {"ignoreErrors": "true", "command": "bash /home/ec2-user/.initScripts/custom.sh"}}, "files": {"/home/ec2-user/.initScripts/custom.py": {"content": {"Fn::Join": ["\n", ["f = open(\"/home/ec2-user/.misteriousOutputFromPython\", \"w\")", "f.write(\"Custom almighty python execution on instance creation!\")", "f.close()"]]}}, "/home/ec2-user/.initScripts/custom.sh": {"content": {"Fn::Join": ["\n", ["#!/bin/bash", "echo \"Custom bash execution on instance creation!\" > /home/ec2-user/.misteriousOutputFromBash"]]}}}}, "setup": {"packages": {"yum": {"gcc": [], "java-1.8.0-openjdk-devel": [], "openmpi": [], "openmpi-devel": [], "gcc-c++": [], "ant": []}}, "commands": {"scanHosts": {"command": "python /home/ec2-user/.initScripts/sshHostScan.py"}, "parseRSA": {"command": "python /home/ec2-user/.initScripts/rsaParser.py"}}, "files": {"/home/ec2-user/.aws/credentials": {"content": {"Fn::Join": ["", ["[default]\n", "aws_access_key_id=", {"Ref": "AccessKey"}, "\n", "aws_secret_access_key=", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]}]]}}, "/etc/hosts": {"content": {"Fn::Join": ["", ["127.0.0.1    localhost    localhost\n", "192.168.0.4    node01    node01\n", "192.168.0.5    node02    node02\n", "192.168.0.6    node03    node03\n"]]}}, "/home/ec2-user/.initScripts/sshHostScan.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "from subprocess import check_output", "input = open(\"/etc/hosts\").read()", "hosts = re.findall('\\s([a-z0-9]+[0-9])\\n', input)", "ips = re.findall('\\n(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\s', input)", "output = list()", "[output.append(check_output([\"ssh-keyscan\", \"-H\", ip])) for ip in ips]", "[output.append(check_output([\"ssh-keyscan\", \"-H\", host])) for host in hosts]", "outputFile = open(\"/home/ec2-user/.ssh/known_hosts\", \"w\")", "[outputFile.write(line + '\\n') for line in output]", "outputFile.close()"]]}}, "/home/ec2-user/.initScripts/rsaParser.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "input = open(\"/home/ec2-user/.ssh/id_rsa.in\").read()", "bgnEnd = re.findall('-----[A-Z\\s]+-----',input)", "content = re.findall('-\\s(.+?)\\s-',input)", "lines = content[0].split(\" \")", "outputFile = open(\"/home/ec2-user/.ssh/id_rsa\", \"w\")", "outputFile.write(bgnEnd[0] + '\\n')", "[outputFile.write(line + '\\n') for line in lines]", "outputFile.write(bgnEnd[1])", "outputFile.close()"]]}}, "/home/ec2-user/.ssh/id_rsa.in": {"owner": "ec2-user", "content": {"Ref": "PrivateKey"}}, "/home/ec2-user/.aws/config": {"content": {"Fn::Join": ["", ["[default]\n", "region = sa-east-1"]]}}}}}}, "Properties": {"InstanceType": {"Ref": "InstanceType"}, "Tags": [{"Value": "Node03", "Key": "Name"}], "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]}, "KeyName": {"Ref": "KeyName"}, "NetworkInterfaces": [{"AssociatePublicIpAddress": "false", "SubnetId": {"Ref": "PrivateSubnet"}, "GroupSet": [{"Ref": "PrivateSecurityGroup"}], "PrivateIpAddress": {"Fn::FindInMap": ["IpAddressConfig", "Node03", "IP"]}, "DeviceIndex": "0"}], "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#!/bin/bash\n", "# Install the files and packages from the metadata\n", "/opt/aws/bin/cfn-init -v -c initOrder", "         --stack ", {"Ref": "AWS::StackName"}, "         --resource StackNode03", "         --region ", {"Ref": "AWS::Region"}, "\n"]]}}}, "DependsOn": "NATInstance", "Type": "AWS::EC2::Instance"}, "VPCEndpointS3": {"Properties": {"VpcId": {"Ref": "VPC"}, "ServiceName": "com.amazonaws.sa-east-1.s3", "RouteTableIds": [{"Ref": "PrivateRouteTable"}, {"Ref": "PublicRouteTable"}]}, "DependsOn": ["PrivateRoute", "PublicRoute"], "Type": "AWS::EC2::VPCEndpoint"}, "NatSecurityGroupIngress443": {"Properties": {"SourceSecurityGroupId": {"Ref": "NatSecurityGroup"}, "ToPort": "443", "GroupId": {"Ref": "NatSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "443"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateSubnet": {"Properties": {"VpcId": {"Ref": "VPC"}, "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "Private", "CIDR"]}, "AvailabilityZone": {"Ref": "AvailabilityZone"}}, "Type": "AWS::EC2::Subnet"}, "AccessKey": {"Properties": {"UserName": {"Ref": "IAMUser"}}, "Type": "AWS::IAM::AccessKey"}, "StackNode01": {"Metadata": {"AWS::CloudFormation::Init": {"configure": {"commands": {"exportJavaHome": {"command": "echo \"export JAVA_HOME=/usr/lib/jvm/java-openjdk/\" >> /home/ec2-user/.bashrc"}, "exportOpenMPIBin": {"command": "echo \"export PATH=/usr/lib64/openmpi/bin:$PATH\" >> /home/ec2-user/.bashrc"}, "ownerAWSConfig": {"command": "chown ec2-user.ec2-user /home/ec2-user/.aws/*"}, "ownerRSA": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/id_rsa"}, "permissionAWSConfig": {"command": "chmod 600 /home/ec2-user/.aws/*"}, "permissionKnownHosts": {"command": "chmod 600 /home/ec2-user/.ssh/known_hosts"}, "ownerKnownHosts": {"command": "chown ec2-user.ec2-user /home/ec2-user/.ssh/known_hosts"}, "permissionRSA": {"command": "chmod 600 /home/ec2-user/.ssh/id_rsa"}, "exportOpenMPILib": {"command": "echo \"export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib:$LD_LIBRARY_PATH\" >> /home/ec2-user/.bashrc"}}}, "configSets": {"initOrder": ["setup", "configure", "custom"]}, "custom": {"commands": {"run_custom.py": {"ignoreErrors": "true", "command": "python /home/ec2-user/.initScripts/custom.py"}, "run_custom.sh": {"ignoreErrors": "true", "command": "bash /home/ec2-user/.initScripts/custom.sh"}}, "files": {"/home/ec2-user/.initScripts/custom.py": {"content": {"Fn::Join": ["\n", ["f = open(\"/home/ec2-user/.misteriousOutputFromPython\", \"w\")", "f.write(\"Custom almighty python execution on instance creation!\")", "f.close()"]]}}, "/home/ec2-user/.initScripts/custom.sh": {"content": {"Fn::Join": ["\n", ["#!/bin/bash", "echo \"Custom bash execution on instance creation!\" > /home/ec2-user/.misteriousOutputFromBash"]]}}}}, "setup": {"packages": {"yum": {"gcc": [], "java-1.8.0-openjdk-devel": [], "openmpi": [], "openmpi-devel": [], "gcc-c++": [], "ant": []}}, "commands": {"scanHosts": {"command": "python /home/ec2-user/.initScripts/sshHostScan.py"}, "parseRSA": {"command": "python /home/ec2-user/.initScripts/rsaParser.py"}}, "files": {"/home/ec2-user/.aws/credentials": {"content": {"Fn::Join": ["", ["[default]\n", "aws_access_key_id=", {"Ref": "AccessKey"}, "\n", "aws_secret_access_key=", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]}]]}}, "/etc/hosts": {"content": {"Fn::Join": ["", ["127.0.0.1    localhost    localhost\n", "192.168.0.4    node01    node01\n", "192.168.0.5    node02    node02\n", "192.168.0.6    node03    node03\n"]]}}, "/home/ec2-user/.initScripts/sshHostScan.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "from subprocess import check_output", "input = open(\"/etc/hosts\").read()", "hosts = re.findall('\\s([a-z0-9]+[0-9])\\n', input)", "ips = re.findall('\\n(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\s', input)", "output = list()", "[output.append(check_output([\"ssh-keyscan\", \"-H\", ip])) for ip in ips]", "[output.append(check_output([\"ssh-keyscan\", \"-H\", host])) for host in hosts]", "outputFile = open(\"/home/ec2-user/.ssh/known_hosts\", \"w\")", "[outputFile.write(line + '\\n') for line in output]", "outputFile.close()"]]}}, "/home/ec2-user/.initScripts/rsaParser.py": {"owner": "ec2-user", "content": {"Fn::Join": ["\n", ["import re", "input = open(\"/home/ec2-user/.ssh/id_rsa.in\").read()", "bgnEnd = re.findall('-----[A-Z\\s]+-----',input)", "content = re.findall('-\\s(.+?)\\s-',input)", "lines = content[0].split(\" \")", "outputFile = open(\"/home/ec2-user/.ssh/id_rsa\", \"w\")", "outputFile.write(bgnEnd[0] + '\\n')", "[outputFile.write(line + '\\n') for line in lines]", "outputFile.write(bgnEnd[1])", "outputFile.close()"]]}}, "/home/ec2-user/.ssh/id_rsa.in": {"owner": "ec2-user", "content": {"Ref": "PrivateKey"}}, "/home/ec2-user/.aws/config": {"content": {"Fn::Join": ["", ["[default]\n", "region = sa-east-1"]]}}}}}}, "Properties": {"InstanceType": {"Ref": "InstanceType"}, "Tags": [{"Value": "Node01", "Key": "Name"}], "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]}, "KeyName": {"Ref": "KeyName"}, "NetworkInterfaces": [{"AssociatePublicIpAddress": "false", "SubnetId": {"Ref": "PrivateSubnet"}, "GroupSet": [{"Ref": "PrivateSecurityGroup"}], "PrivateIpAddress": {"Fn::FindInMap": ["IpAddressConfig", "Node01", "IP"]}, "DeviceIndex": "0"}], "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#!/bin/bash\n", "# Install the files and packages from the metadata\n", "/opt/aws/bin/cfn-init -v -c initOrder", "         --stack ", {"Ref": "AWS::StackName"}, "         --resource StackNode01", "         --region ", {"Ref": "AWS::Region"}, "\n"]]}}}, "DependsOn": "NATInstance", "Type": "AWS::EC2::Instance"}, "PrivateSecurityGroup": {"Properties": {"VpcId": {"Ref": "VPC"}, "GroupDescription": "Security Group for VPC"}, "Type": "AWS::EC2::SecurityGroup"}, "GatewayToInternet": {"Properties": {"InternetGatewayId": {"Ref": "InternetGateway"}, "VpcId": {"Ref": "VPC"}}, "Type": "AWS::EC2::VPCGatewayAttachment"}, "NatSecurityGroupIngress1": {"Properties": {"SourceSecurityGroupId": {"Ref": "NatSecurityGroup"}, "ToPort": "-1", "GroupId": {"Ref": "NatSecurityGroup"}, "IpProtocol": "icmp", "FromPort": "-1"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicRouteTable": {"Properties": {"VpcId": {"Ref": "VPC"}}, "Type": "AWS::EC2::RouteTable"}, "VPC": {"Properties": {"EnableDnsHostnames": "true", "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]}, "EnableDnsSupport": "true", "InstanceTenancy": "default"}, "Type": "AWS::EC2::VPC"}, "PublicSubnetRouteAssociation": {"Properties": {"RouteTableId": {"Ref": "PublicRouteTable"}, "SubnetId": {"Ref": "PublicSubnet"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "NatSecurityGroupIngress3389": {"Properties": {"SourceSecurityGroupId": {"Ref": "NatSecurityGroup"}, "ToPort": "3389", "GroupId": {"Ref": "NatSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "3389"}, "Type": "AWS::EC2::SecurityGroupIngress"}}}